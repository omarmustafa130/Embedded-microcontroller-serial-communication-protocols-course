
UART_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000683  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ae  00000000  00000000  00000837  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028a  00000000  00000000  00000de5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001070  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034d  00000000  00000000  000010d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002b  00000000  00000000  00001425  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001450  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#define F_CPU 1000000U
#include "UART_Interface.h"
int main(void)
{
	UART_Init();
  6c:	0e 94 3e 00 	call	0x7c	; 0x7c <UART_Init>
	char v = 'a';
  70:	81 e6       	ldi	r24, 0x61	; 97
    /* Replace with your application code */
    while (1) 
    {
		UART_SendByte(v);
  72:	0e 94 48 00 	call	0x90	; 0x90 <UART_SendByte>
		v = UART_ReceiveByte();
  76:	0e 94 4c 00 	call	0x98	; 0x98 <UART_ReceiveByte>
  7a:	fb cf       	rjmp	.-10     	; 0x72 <main+0x6>

0000007c <UART_Init>:
#include "UART_Interface.h"

void UART_Init(void)
{
	/*According to datasheet UBRR must be set to 12 to have a baudrate of 9600*/
	UBRRH = 0;
  7c:	10 bc       	out	0x20, r1	; 32
	UBRRL = 12;
  7e:	8c e0       	ldi	r24, 0x0C	; 12
  80:	89 b9       	out	0x09, r24	; 9
	
	/*This line enables double speed mode*/
	UCSRA = (1<<U2X);
  82:	82 e0       	ldi	r24, 0x02	; 2
  84:	8b b9       	out	0x0b, r24	; 11
	
	/*This line selects the data frame width to be 7 data bits*/
	UCSRC = (1<<URSEL) | (1<<UCSZ1);
  86:	84 e8       	ldi	r24, 0x84	; 132
  88:	80 bd       	out	0x20, r24	; 32
	
	/*This line enables UART send and receive pins*/
	UCSRB = (1<<RXEN) | (1<<TXEN);
  8a:	88 e1       	ldi	r24, 0x18	; 24
  8c:	8a b9       	out	0x0a, r24	; 10
  8e:	08 95       	ret

00000090 <UART_SendByte>:
}
void UART_SendByte(unsigned char Byte)
{
	/*This line polls UDRE flag to check if Tx register can be written*/
	while ((UCSRA & (1<<UDRE)) == 0) { /*Do nothing*/}
  90:	5d 9b       	sbis	0x0b, 5	; 11
  92:	fe cf       	rjmp	.-4      	; 0x90 <UART_SendByte>
	
	/*Assign data to UDR to be sent over UART*/
	UDR = Byte;
  94:	8c b9       	out	0x0c, r24	; 12
  96:	08 95       	ret

00000098 <UART_ReceiveByte>:
}
unsigned char UART_ReceiveByte(void)
{
	/*This line polls RXC flag to check if Rx register can be read*/
	while ((UCSRA & (1<<RXC)) == 0) { /*Do nothing*/}
  98:	5f 9b       	sbis	0x0b, 7	; 11
  9a:	fe cf       	rjmp	.-4      	; 0x98 <UART_ReceiveByte>
	return UDR;
  9c:	8c b1       	in	r24, 0x0c	; 12
}
  9e:	08 95       	ret

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>
